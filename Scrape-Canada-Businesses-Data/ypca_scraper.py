
# -*- coding: utf-8 -*-
"""ypca_scraper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SFtl9vLVztR6Y27PY2mWKDXd_rWqa-kU
"""

import concurrent.futures
import requests
from bs4 import BeautifulSoup
import pandas as pd

class Scraper():
    
    def __init__(self):
        """
        let scraper inherits object attributes
        
        :param args: None
        :returns: None
        """

        pass

    def thread(self, funct, funct_arg):
      """
      speed up the request for html pages

      :param args: function(funct), function argument(str)
      :returns: None
      """

      with concurrent.futures.ThreadPoolExecutor() as executor:
        executor.map(funct, funct_arg)


    def provs(self):
        """
        locate all the tags with the given tag name and class selector.
        extract the province in each tag and store them in a list.

        :returns: provinces(list)
        """
        
        self.thread(requests.get, "https://www.yellowpages.ca/locations/")

        return [
            tag.text for tag in [
                tag.find("a", href=True) 
                for tag in BeautifulSoup(
                    requests.get(
                        "https://www.yellowpages.ca/locations/").text, "html.parser").find_all(
                           "h3", class_="categories-title catTitle")
            ] 

        ]
    
    
    def prov_urls(self):
        """
        locate all the tags with the given tag name and class selector.
        extract the province url from each tag and store them in a list.

        :returns: provinces urls(list)
        """
       
        self.thread(requests.get, "https://www.yellowpages.ca/locations/")

        return [
            f"https://yellowpages.ca{tag['href']}" for tag in [
                tag.find("a", href=True) 
                for tag in BeautifulSoup(
                    requests.get(
                        "https://www.yellowpages.ca/locations/").text, "html.parser").find_all(
                           "h3", class_="categories-title catTitle")
            ] 

        ]
    

    def locs(self):
        """
        locate all the tags with the given tag name and class selector.
        extract the location in each tag and store them in a list.

        :returns: locations(list)
        """
        
        self.thread(requests.get, page_url)

        return [
            [
              tag.text for tag in [
                  tag.find("a", href=True)
                  for tag in soup.find_all(
                      "li", "resp-list"
                  )
              ]
            ]
        for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in self.prov_urls()
                        )
                    ]
                )
            ]
        
    ]
    

    def loc_urls(self):
        """
        locate all the tags with the given tag name and class selector.
        extract the location url from each tag and store them in a list.

        :returns: location urls(list)
        """
        
        self.thread(requests.get, page_url)

        return [
            [
                f"https://yellowpages.ca{tag['href']}" for tag in [
                tag.find("a", href=True)
                for tag in soup.find_all(
                    "li", "resp-list"
                )
            ]
          ]
       for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in self.prov_urls()
                        )
                    ]
                )
            ]
    ]


    def bus_cats(self, prov_index=0, loc_index=0):
      """
      locate the specified location url by index.
      extract the business categories and store it
      in a list.

      :param kwargs: province index(int), location index(int)
      :return: business categories(list)
      """
      
      self.thread(requests.get, self.loc_urls()[prov_index][loc_index])

      return [
          tag.text for tag in [
              tag.find("a", href=True) 
              for tag in BeautifulSoup(
                  requests.get(
                      self.loc_urls()[prov_index][loc_index]).text, "html.parser").find_all(
                        "h3", class_="categories-title catTitle")
              
          ] 

      ]
        
    
    def bus_cat_urls(self, prov_index=0, loc_index=0):
      """
      locate the specified location url by index.
      extract the business categories url and store it
      in a list.

      :param kwargs: province index(int), location index(int)
      :return: business categories urls(list)
      """
      
      self.thread(requests.get, self.loc_urls()[prov_index][loc_index])

      return [
            f"https://yellowpages.ca{tag['href']}" for tag in [
                tag.find("a", href=True) 
                for tag in BeautifulSoup(
                    requests.get(
                        self.loc_urls()[prov_index][loc_index]).text, "html.parser").find_all(
                           "h3", class_="categories-title catTitle")
                        ]
              ]


    def subbus_cats(self, prov_index=0, loc_index=0):
      """
      locate the specified location url by index.
      extract the sub business categories and store it
      in a list.

      :param kwargs: province index(int), location index(int)
      :return: sub business categories(list)
      """

      self.thread(requests.get, page_url)

      return [
               [
                  tag.text for tag in [
                      tag.find("a", href=True)
                      for tag in soup.find_all(
                          "h3", "categories-title catTitle"
                      )
                  ]
                ]
            for soup in [
                      soup for soup in (
                        BeautifulSoup(webpage.text, "html.parser") 
                        for webpage in [
                            webpage for webpage in (
                                requests.get(page_url) for page_url in self.bus_cat_urls(prov_index, loc_index)
                            )
                        ]
                    )
                ]
        ]
       

    def subbus_cat_urls(self, prov_index=0, loc_index=0):
      """
      locate the specified location url by index.
      extract the sub business categories and store it
      in a list.

      :param kwargs: province index(int), location index(int)
      :return: sub business categories(list)
      """

      self.thread(requests.get, page_url)

      return [
               [
                  f"https://yellowpages.ca{tag['href']}" for tag in [
                  tag.find("a", href=True)
                  for tag in soup.find_all(
                      "h3", "categories-title catTitle"
                )
            ]
          ]
       for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in self.bus_cat_urls(prov_index, loc_index)
                        )
                    ]
                )
            ]
        ]
            

    def subsubbus_cats(self, prov_index=0, loc_index=0):
        """
        locate the specified location url by index.
        extract the sub sub business categories urls.

        :param kwargs: province index(int), location index(int)
        :returns: sub sub business categories urls(list)
        """
        
        self.thread(requests.get, page_url)

        return [
                 [
                    tag.text for tag in [
                        tag.find("a", href=True)
                        for tag in soup.find_all(
                            "li", "resp-list"
                  )
              ]
            ]
        for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in [
                                      i for url in self.subbus_cat_urls(prov_index, loc_index) for i in url
                                ]
                        )
                    ]
                )
            ]
    ]


    def subsubbus_cat_urls(self, prov_index=0, loc_index=0):
        """
        locate the specified location url by index.
        extract the sub sub business categories urls.

        :param kwargs: province index(int), location index(int)
        :returns: sub sub business categories urls(list)
        """
        
        self.thread(requests.get, page_url)

        return [
                 [
                    f"https://yellowpages.ca{tag['href']}" for tag in [
                    tag.find("a", href=True)
                    for tag in soup.find_all(
                        "li", "resp-list"
                )
            ]
          ]
       for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in [
                                      i for url in self.subbus_cat_urls(prov_index, loc_index) for i in url
                                ]
                        )
                    ]
                )
            ]
        ]
  

    def bus_names(self, prov_index=0, loc_index=0):
        """
        extract the business names from the given 
        business categories urls and store them in a list.

        :param kwargs: province index(int), location index(int)
        :returns: business names(list)
        """

        self.thread(requests.get, page_url)

        return [
            i for bus_name in 
            [
                [
                  tag.text for tag in [
                      tag.find("a", href=True)
                      for tag in soup.find_all(
                          "h3", class_="listing__name jsMapBubbleName"
                      )
                  ]
                ] 
            for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in [
                                      i for url in self.subsubbus_cat_urls(prov_index, loc_index) for i in url
                                ]
                        )
                    ]
                )
            ] 
          ] 
       for i in bus_name
    ]
    

    def bus_types(self, prov_index=0, loc_index=0):
        """
        extract the business types from the given 
        business categories urls and store them in a list.

        :param kwargs: province index(int), location index(int)
        :returns: business types(list)
        """

        self.thread(requests.get, page_url)

        return [
            i for bus_type in 
            [
                [
                  tag.text for tag in [
                      tag.find("a", href=True)
                      for tag in soup.find_all(
                          "div", class_="listing__headings"
                      )
                  ]
                ] 
            for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in [
                                      i for url in self.subsubbus_cat_urls(prov_index, loc_index) for i in url
                                ]
                        )
                    ]
                )
            ]
          ] 
       for i in bus_type
    ]

    
    def bus_str_addrs(self, prov_index=0, loc_index=0):
        """
        extract the business street addresses from the given 
        business categories urls and store them in a list.

        :param kwargs: province index(int), location index(int)
        :returns: business street addresses(list)
        """

        self.thread(requests.get, page_url)

        return [
            i.text for bus_str_addr in 
            [
                [
                  tag for tag in [
                      tag.find(itemprop="streetAddress")
                      for tag in soup.find_all(
                          "div", class_="listing__address address mainLocal noNum"
                      )
                  ]
                ] 
            for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in [
                                      i for url in self.subsubbus_cat_urls(prov_index, loc_index) for i in url
                                ]
                        )
                    ]
                )
            ]
          ] 
       for i in bus_str_addr
    ]

    
    def bus_addrs_loc(self, prov_index=0, loc_index=0):
        """
        extract the business addresses locality from the given 
        business categories urls and store them in a list.

        :param kwargs: province index(int), location index(int)
        :returns: business addresses locality(list)
        """

        self.thread(requests.get, page_url)

        return [
            i.text for bus_addr_loc in 
            [
                [
                  tag for tag in [
                      tag.find(itemprop="addressLocality")
                      for tag in soup.find_all(
                          "div", class_="listing__address address mainLocal noNum"
                      )
                  ]
                ] 
            for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in [
                                      i for url in self.subsubbus_cat_urls(prov_index, loc_index) for i in url
                                ]
                        )
                    ]
                )
            ]
          ] 
       for i in bus_addr_loc
    ]


    def bus_addrs_reg(self, prov_index=0, loc_index=0):
        """
        extract the business addresses region from the given 
        business categories urls and store them in a list.

        :param kwargs: province index(int), location index(int)
        :returns: business addresses region(list)
        """

        self.thread(requests.get, page_url)

        return [
            i.text for bus_addr_reg in 
            [
                [
                  tag for tag in [
                      tag.find(itemprop="addressRegion")
                      for tag in soup.find_all(
                          "div", class_="listing__address address mainLocal noNum"
                      )
                  ]
                ] 
            for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in [
                                      i for url in self.subsubbus_cat_urls(prov_index, loc_index) for i in url
                                ]
                        )
                    ]
                )
            ]
          ] 
       for i in bus_addr_reg
    ]
    

    def bus_post_codes(self, prov_index=0, loc_index=0):
        """
        extract the business postal codes from the given 
        business categories urls and store them in a list.

        :param kwargs: province index(int), location index(int)
        :returns: business postal codes(list)
        """

        self.thread(requests.get, page_url)

        return [
            i.text for bus_post_code in 
            [
                [
                  tag for tag in [
                      tag.find(itemprop="postalCode")
                      for tag in soup.find_all(
                          "div", class_="listing__address address mainLocal noNum"
                      )
                  ]
                ] 
            for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in [
                                      i for url in self.subsubbus_cat_urls(prov_index, loc_index) for i in url
                                ]
                        )
                    ]
                )
            ]
          ] 
       for i in bus_post_code
    ]


    def bus_phone_nums(self, prov_index=0, loc_index=0):
        """
        extract the business phone numbers from the given 
        business categories urls and store them in a list.

        :param kwargs: province index(int), location index(int)
        :returns: business phone numbers(list)
        """

        self.thread(requests.get, page_url)

        return [
            i.text for bus_phone_num in 
            [
                [
                  tag for tag in [
                      tag.find(tabindex="0")
                      for tag in soup.find_all(
                          "li", class_="mlr__submenu__item"
                      )
                  ]
                ] 
            for soup in [
                   soup for soup in (
                    BeautifulSoup(webpage.text, "html.parser") 
                    for webpage in [
                        webpage for webpage in (
                            requests.get(page_url) for page_url in [
                                      i for url in self.subsubbus_cat_urls(prov_index, loc_index) for i in url
                                ]
                        )
                    ]
                )
            ]
          ] 
       for i in bus_phone_num
    ]
    

    def create_df(self, info):
        """
        create the dataframe of the info given.

        :param args: info(dict)
        :returns: dataframe of the info given
        """

        return pd.DataFrame(
                     pd.concat(
                         [
                             pd.Series(i, name=column) for column, i in info
                         ]
                     )
                 )

        
    def create_csv(self, name, info):
      """
      create the csv file of the info given.

      :param args: name(str), info(dict)
      :returns: csv file of the info given
      """
      
      return self.create_df(info).to_csv(f"{name}.csv", index=False)